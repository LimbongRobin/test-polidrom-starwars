{"version":3,"sources":["logo.svg","routes.js","container/Header-Component/header.component.jsx","container/Default-Layout-Component/default-layout.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","React","lazy","routes","path","exact","name","component","Header","Navbar","className","expand","Nav","navbar","NavItem","NavLink","to","DefaultLayout","loading","style","position","fallback","this","map","route","idx","key","render","props","from","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,2LCCrCC,EAAOC,IAAMC,MAAK,kBAAM,8DAkCfC,EAvBD,CACV,CACEC,KAAK,QACLC,OAAM,EACNC,KAAK,OACLC,UAbON,IAAMC,MAAK,kBACtB,uDAgBE,CACEE,KAAM,QACNE,KAAM,OACNC,UAAWP,GAGb,CACEI,KAAM,SACNE,KAAM,QACNC,UAvBQN,IAAMC,MAAK,kBACvB,+D,gCC6BaM,G,MAhCA,WACb,OACE,kBAAC,WAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,cAAcC,OAAO,MACrC,kBAACC,EAAA,EAAD,CAAKF,UAAU,UAAUG,QAAM,GAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAML,UAAU,cAAcM,GAAG,KAAjC,UAKJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAML,UAAU,cAAcM,GAAG,SAAjC,UAKJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAML,UAAU,cAAcM,GAAG,UAAjC,gBC0BCC,E,4MAtCbC,QAAU,kBACR,yBAAKR,UAAU,oCACb,yBAAKA,UAAU,kC,uDAKjB,OACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,WAAD,KAEE,kBAAC,EAAD,CAAQS,MAAO,CAAEC,SAAU,YAE7B,0BAAMV,UAAU,QACd,kBAAC,WAAD,CAAUW,SAAUC,KAAKJ,WACvB,kBAAC,IAAD,KACGf,EAAOoB,KAAI,SAACC,EAAOC,GAClB,OAAOD,EAAMjB,UACX,kBAAC,IAAD,CACEmB,IAAKD,EACLrB,KAAMoB,EAAMpB,KACZC,MAAOmB,EAAMnB,MACbC,KAAMkB,EAAMlB,KACZqB,OAAQ,SAACC,GAAD,OAAW,kBAACJ,EAAMjB,UAAcqB,MAExC,QAEN,kBAAC,IAAD,CAAUC,KAAK,IAAIb,GAAG,mB,GA7BVc,aCQbC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE3B,KAAK,IACLE,KAAK,SACLqB,OAAQ,SAACC,GAAD,OAAW,kBAAC,EAAkBA,SCF5BI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75c8d12f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nconst Body = React.lazy(() => import(\"./views/layout/component/body/body.component\"));\r\n\r\n\r\nconst Task = React.lazy(() =>\r\n  import(\"./views/layout/component/task/task.component\")\r\n);\r\nconst Login = React.lazy(() =>\r\n  import(\"./views/layout/component/login-firebase/login-firebase.component\")\r\n);\r\n\r\n\r\nconst routes =[\r\n    {\r\n      path:\"/task\", \r\n      exact:true, \r\n      name:\"task\", \r\n      component:Task\r\n    },\r\n    // {path:\"/body\", exact:true, name:\"body\", component:Body},\r\n\r\n    {\r\n      path: \"/body\",\r\n      name: \"body\",\r\n      component: Body,\r\n    },\r\n\r\n    {\r\n      path: \"/login\",\r\n      name: \"login\",\r\n      component: Login,\r\n    },\r\n\r\n]\r\n\r\nexport default routes;\r\n","import React, { Fragment } from \"react\";\r\nimport { Navbar, Nav, NavItem, NavLink } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./header.styles.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar className=\"main-header\" expand=\"md\">\r\n        <Nav className=\"mr-auto\" navbar>\r\n          <NavItem>\r\n            <NavLink>\r\n              <Link className=\"header-link\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink>\r\n              <Link className=\"header-link\" to=\"/task\">\r\n                Task\r\n              </Link>\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink>\r\n              <Link className=\"header-link\" to=\"/login\">\r\n                Login\r\n              </Link>\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n      </Navbar>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component, Suspense } from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport routes from \"../../routes\";\r\n// import SideBar from \"../sidebar\";\r\nimport Header from \"../Header-Component/header.component\"\r\n// import  global  from '../../global/global';\r\n\r\n// import Auth from '../../auth/auth';\r\n\r\n// const DefaultAside = React.lazy(() => import(\"./DefaultAside\"));\r\n// const DefaultFooter = React.lazy(() => import(\"./DefaultFooter\"));\r\n// const DefaultHeader = React.lazy(() => import(\"./DefaultHeader\"));\r\n\r\nclass DefaultLayout extends Component {\r\n  loading = () => (\r\n    <div className=\"animated fadeIn pt-1 text-center\">\r\n      <div className=\"sk-spinner sk-spinner-pulse\"></div>\r\n    </div>\r\n  );\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"app-body\">\r\n          <Suspense>\r\n            {/* <AppSidebarNav navConfig={this.state.navData} {...this.props} /> */}\r\n            <Header style={{ position: \"fixed\" }}></Header>\r\n          </Suspense>\r\n          <main className=\"main\">\r\n            <Suspense fallback={this.loading()}>\r\n              <Switch>\r\n                {routes.map((route, idx) => {\r\n                  return route.component ? (\r\n                    <Route\r\n                      key={idx}\r\n                      path={route.path}\r\n                      exact={route.exact}\r\n                      name={route.name}\r\n                      render={(props) => <route.component {...props} />}\r\n                    />\r\n                  ) : null;\r\n                })}\r\n                <Redirect from=\"/\" to=\"/body\" />\r\n              </Switch>\r\n            </Suspense>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DefaultLayout;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter, Route, Switch, BrowserRouter } from \"react-router-dom\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport DefaultLayout from \"./container/Default-Layout-Component/default-layout.component\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route\r\n          path=\"/\"\r\n          name=\"layout\"\r\n          render={(props) => <DefaultLayout {...props} />}\r\n        ></Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}